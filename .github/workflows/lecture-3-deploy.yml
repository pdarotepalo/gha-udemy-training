name: "Lecture 3: Deploy website"

on: workflow_dispatch

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('lecture-3/package-lock.json') }}
      - name: Install dependencies
        working-directory: lecture-3
        run: npm ci
      - name: Lint code
        working-directory: lecture-3
        run: npm run lint
      - name: Test code
        working-directory: lecture-3
        run: npm run test

  # NOTE: Upload artifact
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.js-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('lecture-3/package-lock.json') }}
      - name: Install dependencies
        working-directory: lecture-3
        run: npm ci
      - name: Build website
        working-directory: lecture-3
        run: npm run build
      - name: Publish JS file name
        id: publish
        run: find lecture-3/dist/assets/*.js -type f -execdir echo 'js-file={}' >> $GITHUB_OUTPUT ';'
          # find lecture-3/dist/assets/*.js -type f -execdir echo '::set-output name=js-file::{}' >> $GITHUB_OUTPUT ';'
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: lecture-3/dist
          # path: |
          #   dist
          #   package.json

  # NOTE: Download artifact
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls -laG
      - name: Output JS file name
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
